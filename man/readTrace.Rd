% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readTrace.R
\name{readTrace}
\alias{readTrace}
\title{Read Trace Files
Reads in MCMC log files or JSON files.}
\usage{
readTrace(
  paths,
  format = "simple",
  delim = "\\t",
  burnin = 0.1,
  check.names = FALSE,
  ...
)
}
\arguments{
\item{paths}{Vector of character strings. File path(s) to trace file(s).}

\item{format}{Character string, default is "simple". Indicates type of MCMC trace.
"complex" indicates cases where trace contains vectors of vectors/matrices.}

\item{delim}{Character string, default is "\t". Delimiter of file.}

\item{burnin}{Numeric value, default is 0.1. Fraction of generations to discard (if
between 0 and 1) or number of generations (if greater than 1).}

\item{check.names}{Logical, default is FALSE. Indicates if column names should be
checked and syntactically invalid characters replaced.}

\item{...}{Additional arguments passed to utils::read.table() or readAndParseJSON().}
}
\value{
A list of data frames.
}
\description{
Reads one or multiple MCMC or JSON log files from the same analysis,
discarding a user-specified burn-in, and supports multiple monitor types.
If the trace contains vectors of vectors and the user does not specify
format = "complex", readTrace() will read those columns as factors rather
than numeric vectors.
}
\details{
\code{readTrace} reads and processes trace files, ensuring consistency in headers
and applying burn-in as specified. It distinguishes between JSON and tabular formats,
utilizing \code{\link{readAndParseJSON}} for JSON parsing.
}
\examples{
\donttest{
# Example usage:
output <- readTrace(
  paths = c("simple/part_run_1.log", "simple/part_run_2.log"),
  format = "json",
  delim = "\t",
  burnin = 0.1,
  check.names = FALSE
)

# Display formatted output using a loop
for (i in seq_along(output)) {
  cat(paste("File", i, "\n"))
  print(output[[i]], row.names = TRUE)
  cat("\n")
}
}

}
